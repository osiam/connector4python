<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">



    <!-- Resource Service interface secured via OAuth2 -->
    <http pattern="/secured/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">

        <!-- resources below /secured/get/resource/ are accessed via scope "READ" -->
        <intercept-url pattern="/secured/get/resource" access="SCOPE_READ" />

        <!-- validates the delivered access token -->
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />

        <!-- uses general oauthAccessDeniedHandler -->
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <!-- entry point for OAuth2 secured resources -->
    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="oauth2-authorization-server" />
    </bean>

    <!-- general access decision manager for OAuth2 secured resources -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
            </list>
        </constructor-arg>
    </bean>

    <!-- filter to validate the delivered access token -->
    <oauth:resource-server id="resourceServerFilter" resource-id="oauth2res" token-services-ref="tokenServices" />

    <!-- simple resource service -->
    <!--<bean id="pseudoResourceService" class="org.osiam.oauth2.mvc.PseudoResourceService" />-->

</beans>