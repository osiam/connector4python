<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:sec="http://www.springframework.org/schema/security"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!-- Resource Service interface
         secured via OAuth2 -->
    <http pattern="/secured/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
        access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
        
        <!-- resources below /secured/get/resource/ are accessed via scope "READ"  -->
        <intercept-url pattern="/secured/get/resource" access="SCOPE_READ" />
        
        <!-- validates the delivered access token -->
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        
        <!-- uses general oauthAccessDeniedHandler -->
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <!-- entry point for OAuth2 secured resources -->
    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="oauth2-authorization-server" />
    </bean>

    <!-- general access decision manager for OAuth2 secured resources -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
            </list>
        </constructor-arg>
    </bean>

    <!-- filter to validate the delivered access token -->
    <oauth:resource-server id="resourceServerFilter" resource-id="oauth2res" token-services-ref="tokenServices" />



    <!-- OAuth2 Access Token interface
         this is used by clients to request an access token for a certain resource -->
    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        
        <!-- the client needs to authenticate itself -->
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        
        <!-- use http basic with this entry point authentication method to authenticate the client -->
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        
        <!-- uses general oauthAccessDeniedHandler -->
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>
    
    <!-- configures the authentication mechanisms used to authenticate clients -->
    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>
    
    <!-- service holding client data -->
    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>

    <!-- the OAuth2 authentication entry point -->
    <bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="authorization-server/client" />
    </bean>



    <!-- OAuth2 User Login/Grant Access interface
         provides a login form for the user to login and grant access of resources to a client -->
    <http access-denied-page="/login.jsp?authorization_error=true" disable-url-rewriting="true"
        xmlns="http://www.springframework.org/schema/security">
        
        <!-- generally all resources below /oauth are accessed as role "USER"
             this does not affect more specialized configurations -->
        <intercept-url pattern="/oauth/**" access="ROLE_USER" />
        
        <!-- shows a login form to the user -->
        <form-login authentication-failure-url="/login.jsp?authentication_error=true" login-page="/login.jsp"
            login-processing-url="/login.do" />
        
        <!-- this needs to be accessible anonymously -->
        <anonymous enabled="true" />
    </http>

    <!-- general access denied handler -->
    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="userDetailsService" />
    </authentication-manager>

    <bean id="userDetailsService" class="org.osiam.oauth2.user.please.remove.me.asap.PseudoAuthenticationBean" />


    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>

    <oauth:authorization-server client-details-service-ref="clientDetails"
        token-services-ref="tokenServices">
        <oauth:authorization-code />
        <oauth:refresh-token />
    </oauth:authorization-server>

    <!--<oauth:resource-server id="resourceServerFilter" resource-id="oauth2res" token-services-ref="tokenServices" /> -->
    <oauth:resource-server id="oauth2ProviderFilter" resource-id="oauth2res" token-services-ref="tokenServices" />
    <bean id="clientDetails" class="org.osiam.oauth2.client.service.ClientDetailsLoadingBean" />

    <mvc:annotation-driven />

    <mvc:default-servlet-handler />

    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler" />

    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <!--Basic application beans. -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">

        <property name="viewResolvers">
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="prefix" value="/WEB-INF/jsp/"></property>
                <property name="suffix" value=".jsp"></property>
            </bean>
        </property>
        <property name="defaultViews">
            <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                <property name="extractValueFromSingleKeyModel" value="true" />
            </bean>
        </property>
    </bean>
    <bean id="resourceServer" class="org.osiam.oauth2.mvc.PseudoResourceService" />
    <!-- Override the default mappings for approval and error pages -->
    <bean id="accessConfirmationController" class="org.osiam.oauth2.mvc.AccessConfirmationController">
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>
</beans>
