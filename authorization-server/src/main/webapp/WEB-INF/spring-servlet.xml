<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:sec="http://www.springframework.org/schema/security"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!-- needed for exchanging the authorization_code to an access_token -->
    <import resource="client-authentication.xml"/>
    <!-- needed to get oauth2 secured resources -->
    <import resource="resource-server.xml"/>
    <!-- needed for getting an authorization-code -->
    <import resource="user-authentication.xml"/>

    <!-- configures the OAuth2 authorization server -->
    <oauth:authorization-server client-details-service-ref="clientDetails"
        token-services-ref="tokenServices">
        <oauth:authorization-code />
        <oauth:refresh-token />
    </oauth:authorization-server>

    <!-- access token services -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>

    <!-- the token store managing all access tokens -->
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />


    <!-- the client data store -->
    <bean id="clientDetails" class="org.osiam.oauth2.client.service.ClientDetailsLoadingBean" />


    <!-- Enabled @Secured annotation -->
    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>

    <!-- handles denied accesses of @secured methods -->
    <oauth:expression-handler id="oauthExpressionHandler" />

    <!-- view resolver to find JSP's -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="viewResolvers">
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="prefix" value="/WEB-INF/jsp/"/>
                <property name="suffix" value=".jsp"/>
            </bean>
        </property>
        <property name="defaultViews">
            <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                <property name="extractValueFromSingleKeyModel" value="true" />
            </bean>
        </property>
    </bean>


    <!-- access controller to show a login form -->
    <bean id="accessConfirmationController" class="org.osiam.oauth2.mvc.AccessConfirmationController">
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>

    <!-- general access denied handler -->
    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <mvc:annotation-driven />

    <mvc:default-servlet-handler />

</beans>
